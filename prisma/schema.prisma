generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Matchups {
  id             String  @id @unique
  drawEligible   Boolean
  idEvent        String
  idHomeTeam     String
  idAwayTeam     String
  idLeague       String
  strEvent       String
  strLeague      String
  strHomeTeam    String
  strAwayTeam    String
  strTimestamp   String
  strThumb       String
  oddsType       String
  oddsScope      String
  drawTeam       String?
  adminSelected  Boolean
  used           Boolean
  locked         Boolean
  adminUnlocked  Boolean
  adminCorrected Boolean
  awayScore      Int?
  homeScore      Int?
  pointsTotal    Int?
  status         String
  awayBadgeId    String
  homeBadgeId    String
  Odds           Odds[]
  Pick           Pick[]
}

model Media {
  teamId   String  @id @unique
  teamName String
  badgeId  String
  logoId   String?
  jerseyId String?
}

model Odds {
  id         String   @id @unique
  matchupId  String
  oddsGameId Int
  sportsbook String
  homeOdds   Int?
  awayOdds   Int?
  homeSpread Float?
  awaySpread Float?
  total      Float?
  drawOdds   Int?
  overOdds   Int?
  underOdds  Int?
  createdAt  DateTime @default(now())
  Matchups   Matchups @relation(fields: [matchupId], references: [id])
  Pick       Pick[]
}

model Parlay {
  id            String   @id @unique
  userId        String
  locked        Boolean  @default(false)
  createdAt     DateTime @default(now())
  pointsAwarded Float    @default(0)
  pointsWagered Float    @default(100)
  User          User     @relation(fields: [userId], references: [id])
  Pick          Pick[]
}

model Pick {
  id            String    @id @unique
  userId        String
  parlayId      String
  oddsId        String
  matchupId     String
  locked        Boolean
  useLatestOdds Boolean
  pick          String
  result        String    @default("TBD")
  createdAt     DateTime  @default(now())
  userUpdatedAt DateTime?
  Matchups      Matchups  @relation(fields: [matchupId], references: [id])
  Odds          Odds      @relation(fields: [oddsId], references: [id])
  Parlay        Parlay    @relation(fields: [parlayId], references: [id])
  User          User      @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  Account       Account[]
  Parlay        Parlay[]
  Pick          Pick[]
  Session       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
